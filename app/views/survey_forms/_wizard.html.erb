<html>
<head>
  <style>
      body,
      html {
          padding: 0;
          margin: 0;
          background: #f7f8fa;
          font-family: "Lato", sans-serif;
          color: #676767;
      }

      .wrapper {
          position: relative;
          max-width: 1080px;
          margin: 50px auto;
      }

      .wizard {
          max-width: 620px;
          margin: 0 auto;
      }
      .wizard__header {
          position: relative;
          color: #fff;
          padding: 50px;
          border-radius: 5px;
          border-bottom-left-radius: 0;
          border-bottom-right-radius: 0;
          text-align: center;
          height: 100px;
          background: url("http://cdn-image.travelandleisure.com/sites/default/files/styles/1600x1000/public/1444253482/DG2015-paris.jpg?itok=XH81cBH9");
          background-color: #4d637b;
          background-position: center;
          background-repeat: no-repeat;
          background-size: cover;
      }
      .wizard__header-content {
          position: absolute;
          width: 100%;
          padding: 0 50px;
          text-align: center;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -60%);
      }
      .wizard__header-overlay {
          position: absolute;
          width: 100%;
          height: 100%;
          top: 0;
          left: 0;
          background: rgba(77, 99, 123, 0.6);
          border-top-left-radius: 5px;
          border-top-right-radius: 5px;
      }
      .wizard__title {
          font-size: 1.5rem;
          line-height: 2rem;
          margin: 0;
      }
      .wizard__subheading {
          text-transform: uppercase;
          margin: 0;
          font-size: 0.8rem;
          font-weight: 100;
          letter-spacing: 2px;
      }
      .wizard__subheading span {
          font-weight: 600;
      }
      .wizard__steps {
          position: absolute;
          bottom: 0;
          left: 0;
          width: 100%;
          transform: translateY(50%);
          z-index: 10;
      }
      .wizard__footer {
          padding: 0 50px 50px;
          border-radius: 5px;
      }
      .wizard__content {
          background: #fff;
          box-shadow: 0px 0px 10px #c5c5c5;
          border-radius: 5px;
      }
      .wizard__congrats-message {
          color: #676767;
          text-align: center;
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          opacity: 0;
      }
      .wizard.completed .wizard__content {
          animation: gettingOut 2s cubic-bezier(1, -0.71, 1, 1.16) forwards;
      }
      .wizard.completed .wizard__congrats-message {
          animation: fadeIn 2s cubic-bezier(1, -0.71, 1, 1.16) forwards;
      }

      .line {
          position: absolute;
          top: 20px;
          left: 50%;
          z-index: -1;
          height: 6px;
          transition: all 0.5s ease;
      }
      .line.-start {
          left: 0%;
          background: #5094de;
          width: 50%;
      }
      .line.-end {
          left: 50%;
          background: #5094de;
          width: 50%;
      }
      .line.-background {
          background: #c3c3c3;
          width: 100%;
      }
      .line.-progress {
          background: #5094de;
          width: 100%;
          transform: scaleX(0);
          transform-origin: left center;
      }
      .line.-in-progress {
          transform: scaleX(1);
      }

      .panels {
          position: relative;
          overflow: hidden;
      }

      .panel {
          position: absolute;
          top: 0;
          left: 0;
          transition: 0.5s all;
          padding: 50px;
      }
      .panel__header {
          margin-bottom: 30px;
      }
      .panel__title {
          font-size: 1.5rem;
          line-height: 2rem;
          margin: 0;
      }
      .panel__subheading {
          font-size: 0.9rem;
          line-height: 1.2rem;
          margin: 0;
      }
      .panel.movingOutBackward {
          transform: translateX(-620px);
      }
      .panel.movingOutFoward {
          transform: translateX(620px);
      }
      .panel.movingIn {
          transform: translateX(0);
      }

      .steps {
          position: relative;
          display: flex;
          flex: 0 1 auto;
          color: #fff;
      }

      .step {
          flex-basis: 0;
          flex-grow: 1;
          max-width: 100%;
          box-sizing: border-box;
          text-align: center;
          border-radius: 5px;
      }
      .step__content {
          position: relative;
          z-index: 2;
      }
      .step__number {
          font-size: 1.3rem;
          color: #676767;
          background: #fff;
          font-weight: 800;
          width: 40px;
          height: 40px;
          line-height: 40px;
          margin: 0 auto;
          border-radius: 50%;
          border: 5px solid #c3c3c3;
          transition: opacity 0.5s;
          opacity: 1;
          z-index: 5;
      }
      .step.-completed .step__number {
          opacity: 0;
      }
      .step.-completed .checkmark {
          z-index: 0;
          animation: fill 0.4s ease-in-out forwards, scale 0.3s ease-in-out 0.6s both;
      }
      .step.-completed .checkmark__check {
          animation: stroke 0.5s linear 0.4s forwards;
      }
      .step.-completed .line {
          transform: scaleX(1);
      }
      .step:last-child .line {
          width: 50%;
      }

      .checkmark {
          position: absolute;
          top: 0;
          left: 50%;
          transform: translateX(-50%);
          width: 50px;
          height: 50px;
          border-radius: 50%;
          stroke-width: 2;
          stroke: #fff;
          stroke-miterlimit: 10;
          box-shadow: inset 0px 0px 0px #75b2f5;
          z-index: -1;
      }
      .checkmark__circle {
          stroke-dasharray: 166;
          stroke-dashoffset: 166;
          stroke-width: 8;
          stroke-miterlimit: 10;
          stroke: #5094de;
          fill: none;
          animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
      }
      .checkmark__check {
          transform-origin: 50% 50%;
          stroke-dasharray: 40;
          stroke-dashoffset: 40;
          stroke: #fff;
          stroke-width: 5;
      }

      .button {
          cursor: pointer;
          font-size: 1rem;
          line-height: 1rem;
          background: #5094de;
          color: #fff;
          padding: 10px 15px;
          border: none;
          outline: none;
          display: inline-block;
          transition: all 0.3s;
      }
      .button:hover {
          background: #7baee6;
      }
      .button.previous {
          margin-right: 5px;
      }
      .button.disabled {
          background: #c3c3c3;
          cursor: default;
      }

      @keyframes stroke {
          to {
              stroke-dashoffset: 0;
          }
      }
      @keyframes scale {
          50% {
              transform: translateX(-50%) scale3d(1.5, 1.5, 1.5);
          }
          100% {
              transform: scale3d(0);
          }
      }
      @keyframes fill {
          100% {
              box-shadow: inset 0px 0px 0px 30px #75b2f5;
          }
      }
      @keyframes gettingOut {
          0% {
              transform: translateY(0%);
          }
          30% {
              transform: translateY(100px);
          }
          100% {
              transform: translateY(-200%);
          }
      }
      @keyframes fadeIn {
          100% {
              opacity: 1;
          }
      }
  </style>
<script>
    class Steps {
        constructor(wizard) {
            this.wizard = wizard;
            this.steps = this.getSteps();
            this.stepsQuantity = this.getStepsQuantity();
            this.currentStep = 0;
        }

        setCurrentStep(currentStep) {
            this.currentStep = currentStep;
        }

        getSteps() {
            return this.wizard.getElementsByClassName('step');
        }

        getStepsQuantity() {
            return this.getSteps().length;
        }

        handleConcludeStep() {
            this.steps[this.currentStep].classList.add('-completed');
        }

        handleStepsClasses(movement) {
            if (movement > 0)
                this.steps[this.currentStep - 1].classList.add('-completed');else
            if (movement < 0)
                this.steps[this.currentStep].classList.remove('-completed');
        }}


    class Panels {
        constructor(wizard) {
            this.wizard = wizard;
            this.panelWidth = this.wizard.offsetWidth;
            this.panelsContainer = this.getPanelsContainer();
            this.panels = this.getPanels();
            this.currentStep = 0;

            this.updatePanelsPosition(this.currentStep);
            this.updatePanelsContainerHeight();
        }

        getCurrentPanelHeight() {
            return `${this.getPanels()[this.currentStep].offsetHeight}px`;
        }

        getPanelsContainer() {
            return this.wizard.querySelector('.panels');
        }

        getPanels() {
            return this.wizard.getElementsByClassName('panel');
        }

        updatePanelsContainerHeight() {
            this.panelsContainer.style.height = this.getCurrentPanelHeight();
        }

        updatePanelsPosition(currentStep) {
            const panels = this.panels;
            const panelWidth = this.panelWidth;

            for (let i = 0; i < panels.length; i++) {if (window.CP.shouldStopExecution(0)) break;
                panels[i].classList.remove(
                    'movingIn',
                    'movingOutBackward',
                    'movingOutFoward');


                if (i !== currentStep) {
                    if (i < currentStep) panels[i].classList.add('movingOutBackward');else
                    if (i > currentStep) panels[i].classList.add('movingOutFoward');
                } else {
                    panels[i].classList.add('movingIn');
                }
            }window.CP.exitedLoop(0);

            this.updatePanelsContainerHeight();
        }

        setCurrentStep(currentStep) {
            this.currentStep = currentStep;
            this.updatePanelsPosition(currentStep);
        }}


    class Wizard {
        constructor(obj) {
            this.wizard = obj;
            this.panels = new Panels(this.wizard);
            this.steps = new Steps(this.wizard);
            this.stepsQuantity = this.steps.getStepsQuantity();
            this.currentStep = this.steps.currentStep;

            this.concludeControlMoveStepMethod = this.steps.handleConcludeStep.bind(this.steps);
            this.wizardConclusionMethod = this.handleWizardConclusion.bind(this);
        }

        updateButtonsStatus() {
            if (this.currentStep === 0)
                this.previousControl.classList.add('disabled');else

                this.previousControl.classList.remove('disabled');
        }

        updtadeCurrentStep(movement) {
            this.currentStep += movement;
            this.steps.setCurrentStep(this.currentStep);
            this.panels.setCurrentStep(this.currentStep);

            this.handleNextStepButton();
            this.updateButtonsStatus();
        }

        handleNextStepButton() {
            if (this.currentStep === this.stepsQuantity - 1) {
                this.nextControl.innerHTML = 'Conclude!';

                this.nextControl.removeEventListener('click', this.nextControlMoveStepMethod);
                this.nextControl.addEventListener('click', this.concludeControlMoveStepMethod);
                this.nextControl.addEventListener('click', this.wizardConclusionMethod);
            } else {
                this.nextControl.innerHTML = 'Next';

                this.nextControl.addEventListener('click', this.nextControlMoveStepMethod);
                this.nextControl.removeEventListener('click', this.concludeControlMoveStepMethod);
                this.nextControl.removeEventListener('click', this.wizardConclusionMethod);
            }
        }

        handleWizardConclusion() {
            this.wizard.classList.add('completed');
        }

        addControls(previousControl, nextControl) {
            this.previousControl = previousControl;
            this.nextControl = nextControl;
            this.previousControlMoveStepMethod = this.moveStep.bind(this, -1);
            this.nextControlMoveStepMethod = this.moveStep.bind(this, 1);

            previousControl.addEventListener('click', this.previousControlMoveStepMethod);
            nextControl.addEventListener('click', this.nextControlMoveStepMethod);

            this.updateButtonsStatus();
        }

        moveStep(movement) {
            if (this.validateMovement(movement)) {
                this.updtadeCurrentStep(movement);
                this.steps.handleStepsClasses(movement);
            } else {
                throw 'This was an invalid movement';
            }
        }

        validateMovement(movement) {
            const fowardMov = movement > 0 && this.currentStep < this.stepsQuantity - 1;
            const backMov = movement < 0 && this.currentStep > 0;

            return fowardMov || backMov;
        }}


    let wizardElement = document.getElementById('wizard');
    let wizard = new Wizard(wizardElement);
    let buttonNext = document.querySelector('.next');
    let buttonPrevious = document.querySelector('.previous');

    wizard.addControls(buttonPrevious, buttonNext);

</script>
</head>

<body>
<div class="wrapper">
  <div id="wizard" class="wizard">
    <div class="wizard__content">
      <header class="wizard__header">
        <div class="wizard__header-overlay"></div>

        <div class="wizard__header-content">
          <h1 class="wizard__title">Get start with Javascript!</h1>
          <p class="wizard__subheading">Start with <span>3</span> simple steps.</p>
        </div>

        <div class="wizard__steps">
          <nav class="steps">
            <div class="step">
              <div class="step__content">
                <p class="step__number"><i class="fa fa-github-alt"></i></p>
                <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                  <circle class="checkmark__circle" cx="26" cy="26" r="25" fill="none" />
                  <path class="checkmark__check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                </svg>

                <div class="lines">
                  <div class="line -start">
                  </div>

                  <div class="line -background">
                  </div>

                  <div class="line -progress">
                  </div>
                </div>
              </div>
            </div>

            <div class="step">
              <div class="step__content">
                <p class="step__number"><i class="fa fa-book"></i></p>
                <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                  <circle class="checkmark__circle" cx="26" cy="26" r="25" fill="none" />
                  <path class="checkmark__check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                </svg>

                <div class="lines">
                  <div class="line -background">
                  </div>

                  <div class="line -progress">
                  </div>
                </div>
              </div>
            </div>

            <div class="step">
              <div class="step__content">
                <p class="step__number"><i class="fa fa-group"></i></p>
                <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                  <circle class="checkmark__circle" cx="26" cy="26" r="25" fill="none" />
                  <path class="checkmark__check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                </svg>

                <div class="lines">
                  <div class="line -background">
                  </div>

                  <div class="line -progress">
                  </div>
                </div>
              </div>
            </div>
          </nav>
        </div>
      </header>

      <div class="panels">
        <div class="panel">
          <header class="panel__header">
            <h2 class="panel__title">Create a Github account</h2>
            <p class="panel__subheading">With github you can show your projects and find new things everyday!</p>
          </header>


        </div>

        <div class="panel">
          <header class="panel__header">
            <h2 class="panel__title">Learn more about pure Javascript.</h2>
            <p class="panel__subheading">We have cool frameworks, but none is better then VanillaJS</p>
          </header>

          <p class="panel__content">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna culpa qui officia deserunt mollit anim id est laborum.</p>
          <p class="panel__content">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna culpa qui officia deserunt mollit anim id est laborum.</p>
        </div>

        <div class="panel">
          <header class="panel__header">
            <h2 class="panel__title">Stay in touch with the community.</h2>
            <p class="panel__subheading">Community is everything, and here we do some crazy stuff.</p>
          </header>

          <p class="panel__content">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna culpa qui officia deserunt mollit anim id est laborum.</p>
        </div>
      </div>

      <div class="wizard__footer">
        <button class="button previous">Previous</button>
        <button class="button next">Next</button>
      </div>
    </div>

    <h1 class="wizard__congrats-message">
      Congratulations, you are now in a world of pain and suffering!
    </h1>
  </div>
</div>




</body>
</html>



<h2 style="margin-left: 280px">Review Performance Form</h2>
<div class="card" style="width: 50rem; margin-left: 280px">


  <%= form_for :survey_forms  do |f| %>


    <ul class="list-group list-group-flush">


      <li class="list-group-item">

        <div class="field">


          Employee Rating
          <%= @quest.quality %>
          <hr>
          <%= f.label :"Quality - The extent to which an employee's work is completed thoroughly and correctly following established process & procedures. Required paperwork is thorough and neat."%><br />
          <%= f.text_field :quality, autofocus: true, class:"form-control" %>
        </div>

      </li>


      <li class="list-group-item">

        <div class="field">
          Employee Rating
          <%= @quest.reliability %><hr>
          <%= f.label :"Productivity / Independence / Reliability - The extent to which an employee produces a significant volume of work efficiently in a specified period of time. Ability to work independently with little or no direction/ follow-up to complete tasks/job assignment."%><br />
          <%= f.text_field :reliability, autofocus: true , class:"form-control"%>
        </div>

      </li>

      <li class="list-group-item">

        <div class="field">
          Employee Rating
          <%= @quest.job_knowledge %><hr>
          <%= f.label :"Job Knowledge - The extent to which an employee perform the job. Employee possesses the practical and technical knowledge required of the job. " %><br />
          <%= f.text_field :job_knowledge, autofocus: true, class:"form-control" %>
        </div>
      </li>

      <li class="list-group-item">

        <div class="field">
          Employee Rating
          <%= @quest.attendence %><hr>
          <%= f.label :"Attendance -The extent to which an employee is punctual, observes prescribed work break/meal periods and has an acceptable overall attendance record. Employee's willingness to work overtime as required. Employee comes in as the time prescribed by office rules. " %><br />
          <%= f.text_field :attendence, autofocus: true, class:"form-control" %>
        </div>

      </li>

      <li class="list-group-item">


        <div class="field">
          Employee Rating
          <%= @quest.commitment %><hr>
          <%= f.label :"Interpersonal Relationships / Cooperation /Commitment - The extent to which employee is willing and demonstrates the ability to cooperate, work and communicate with coworkers, supervisors, subordinates and/or outside contacts. Employee accepts and responds to change in a positive manner. Accepts job assignments and additional duties willingly, takes responsibility for own performance and job assignments. " %><br />
          <%= f.text_field :commitment, autofocus: true, class:"form-control" %>
        </div>

      </li>

      <li class="list-group-item">
        <div class="field">
          Employee Rating
          <%= @quest.creativity %><hr>
          <%= f.label :"Initiative/ Creativity - The extent to which an employee seeks out new assignments, proposes improved work methods, suggests ideas to eliminate waste, finds new and better ways of doing things. " %><br />
          <%= f.text_field :creativity, autofocus: true , class:"form-control"%>
        </div>

      </li>


      <li class="list-group-item">

        <div class="field">
          Employee Rating
          <%= @quest.adherence_to_policy %><hr>
          <%= f.label :"Adherence to Policy - The extent to which the employees follows company policies, procedures and work conduct rules. Complies with and follows all safety rules and regulations, wears required safety equipment. " %><br />
          <%= f.text_field :adherence_to_policy, autofocus: true, class:"form-control" %>
        </div>

      </li>


      <li class="list-group-item">


        <div class="field">
          Employee Rating
          <%= @quest.lead %><hr>
          <%= f.label :"Lead (if applicable)- The extent to which the employee demonstrates proper judgment and decision-making skills when directing others. Directs work flow in assigned areas effectively to meet production / area goals " %><br />
          <%= f.text_field :lead, autofocus: true , class:"form-control"%>
        </div>

      </li>

      <li class="list-group-item">


        <div class="field">
          Employee Rating
          <%= @quest.improvement_needed %><hr>
          <%= f.label :"Specific areas of needed improvement and goals set for next review:
 " %><br />
          <%= f.text_field :improvement_needed, autofocus: true, class:"form-control" %>
        </div>
      </li>

      <li class="list-group-item">




        <div class="field">
          Employee Rating
          <%= @quest.accomplishments %><hr>
          <%= f.label :"Accomplishments or new abilities demonstrated since last review? " %><br />
          <%= f.text_field :accomplishments, autofocus: true, class:"form-control" %>
        </div>
      </li>

      <%= f.text_field :user_id, value: @quest.user_id ,hidden:true %>
      <%= f.text_field :submitted_by, value: current_user.email , hidden:true %>
    </ul>

    <div class="card-footer">

      <div class="actions">
        <%= f.submit "Submit" %>
      </div>
    </div>
  <% end %>

</div>